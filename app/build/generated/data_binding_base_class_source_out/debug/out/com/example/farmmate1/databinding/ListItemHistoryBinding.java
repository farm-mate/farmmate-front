// Generated by view binder compiler. Do not edit!
package com.example.farmmate1.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.farmmate1.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ListItemHistoryBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ConstraintLayout listItemHistoryCl;

  @NonNull
  public final ImageView listItemIbNumber;

  @NonNull
  public final TextView listItemTvDate;

  @NonNull
  public final TextView listItemTvResult;

  private ListItemHistoryBinding(@NonNull ConstraintLayout rootView,
      @NonNull ConstraintLayout listItemHistoryCl, @NonNull ImageView listItemIbNumber,
      @NonNull TextView listItemTvDate, @NonNull TextView listItemTvResult) {
    this.rootView = rootView;
    this.listItemHistoryCl = listItemHistoryCl;
    this.listItemIbNumber = listItemIbNumber;
    this.listItemTvDate = listItemTvDate;
    this.listItemTvResult = listItemTvResult;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ListItemHistoryBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ListItemHistoryBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.list_item_history, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ListItemHistoryBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.list_item_history_cl;
      ConstraintLayout listItemHistoryCl = ViewBindings.findChildViewById(rootView, id);
      if (listItemHistoryCl == null) {
        break missingId;
      }

      id = R.id.list_item_ib_number;
      ImageView listItemIbNumber = ViewBindings.findChildViewById(rootView, id);
      if (listItemIbNumber == null) {
        break missingId;
      }

      id = R.id.list_item_tv_date;
      TextView listItemTvDate = ViewBindings.findChildViewById(rootView, id);
      if (listItemTvDate == null) {
        break missingId;
      }

      id = R.id.list_item_tv_result;
      TextView listItemTvResult = ViewBindings.findChildViewById(rootView, id);
      if (listItemTvResult == null) {
        break missingId;
      }

      return new ListItemHistoryBinding((ConstraintLayout) rootView, listItemHistoryCl,
          listItemIbNumber, listItemTvDate, listItemTvResult);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
